import React, { useState } from 'react';
import { Play, ArrowRight, CheckCircle, AlertTriangle } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, 
         AlertDialogContent, AlertDialogDescription, AlertDialogFooter, 
         AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import AssetList from './AssetList';

const ScenarioLaunch = ({ scenario }) => {
  const [isLaunching, setIsLaunching] = useState(false);
  const [isLaunched, setIsLaunched] = useState(false);
  const [error, setError] = useState(null);
  const [showDialog, setShowDialog] = useState(false);

  const handleLaunch = async () => {
    setError(null);
    setIsLaunching(true);

    try {
      // Call the activation endpoint
      const response = await fetch(`/api/scenarios/${scenario.id}/activate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.detail || 'Failed to activate scenario');
      }

      const data = await response.json();
      setIsLaunched(true);
      console.log('Scenario activated:', data);
    } catch (err) {
      setError(err.message || 'Failed to launch scenario. Please try again.');
      console.error('Launch error:', err);
    } finally {
      setIsLaunching(false);
    }
  };

  if (!scenario) {
    return (
      <div className="bg-gray-800 rounded-lg p-6 w-full space-y-4">
        <div className="text-gray-400 text-center py-4">
          Please select a scenario to launch
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg p-6 w-full space-y-4">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold text-gray-100">Launch Scenario</h2>
        {isLaunched && (
          <div className="flex items-center space-x-2 text-green-400">
            <CheckCircle className="w-5 h-5" />
            <span>Launched</span>
          </div>
        )}
      </div>

      <div className="space-y-4">
        {/* Scenario Info */}
        <div>
          <div className="text-sm text-gray-400 mb-1">Scenario</div>
          <div className="flex items-center space-x-2">
            <span className="text-gray-100 font-medium">{scenario.name}</span>
            <ArrowRight className="w-4 h-4 text-gray-400" />
            <div className={`px-2 py-1 rounded-full text-xs ${
              scenario.type === 'satellite_operations'
                ? 'bg-blue-500/10 text-blue-400'
                : scenario.type === 'training'
                ? 'bg-green-500/10 text-green-400'
                : 'bg-yellow-500/10 text-yellow-400'
            }`}>
              {scenario.type.replace('_', ' ')}
            </div>
          </div>
        </div>

        {/* Required Assets */}
        <div>
          <div className="text-sm text-gray-400 mb-1">Required Assets</div>
          <AssetList assets={scenario.assets} />
        </div>

        {/* Centered Launch Button with Confirmation Dialog */}
        <div className="flex justify-center">
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <button
                className={`bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-6 py-2 flex items-center justify-center space-x-2 ${
                  isLaunching || isLaunched ? 'opacity-50 cursor-not-allowed' : ''
                }`}
                disabled={isLaunching || isLaunched}
              >
                <Play className="w-5 h-5" />
                <span>
                  {isLaunching ? 'Launching...' : isLaunched ? 'Launched' : 'Launch Scenario'}
                </span>
              </button>
            </AlertDialogTrigger>
            <AlertDialogContent className="bg-gray-800 border border-gray-700">
              <AlertDialogHeader>
                <AlertDialogTitle className="text-gray-100">Launch Scenario?</AlertDialogTitle>
                <AlertDialogDescription className="text-gray-400">
                  This will activate "{scenario.name}" as the current scenario. Only one scenario can be active at a time.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel className="bg-gray-700 text-gray-100 hover:bg-gray-600 border-gray-600">
                  Cancel
                </AlertDialogCancel>
                <AlertDialogAction 
                  className="bg-blue-600 hover:bg-blue-700"
                  onClick={handleLaunch}
                >
                  Launch
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>

        {error && (
          <div className="flex items-center justify-center space-x-2 text-red-400 text-sm">
            <AlertTriangle className="w-4 h-4" />
            <span>{error}</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default ScenarioLaunch;
